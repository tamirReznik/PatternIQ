import os
import json
from datetime import date

def create_test_reports():
    """Create test reports to verify generation is working"""

    print("üîß Creating Test Reports")
    print("=" * 30)

    # Ensure reports directory exists
    reports_dir = "reports"
    os.makedirs(reports_dir, exist_ok=True)

    today = date.today()

    # Create JSON report
    json_data = {
        "report_date": today.isoformat(),
        "system": "PatternIQ v1.0",
        "market_regime": "Tech Leadership",
        "signal_strength": 85,
        "recommendations": {
            "long": [
                {"symbol": "AAPL", "score": 0.875, "action": "STRONG BUY", "size": "3.0%", "price": 175.50},
                {"symbol": "MSFT", "score": 0.724, "action": "BUY", "size": "2.5%", "price": 415.25}
            ],
            "short": [
                {"symbol": "XOM", "score": -0.653, "action": "SELL", "size": "2.0%", "price": 115.30}
            ]
        }
    }

    # Save JSON
    json_file = f"test_report_{today.strftime('%Y%m%d')}.json"
    json_path = os.path.join(reports_dir, json_file)

    with open(json_path, 'w') as f:
        json.dump(json_data, f, indent=2)

    print(f"‚úÖ JSON saved: {json_file}")

    # Create HTML
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>PatternIQ Test Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background: #2c3e50; color: white; padding: 20px; }}
        .section {{ margin: 20px 0; padding: 15px; background: #f9f9f9; }}
        table {{ width: 100%; border-collapse: collapse; }}
        th, td {{ padding: 8px; border: 1px solid #ddd; }}
        .buy {{ color: green; font-weight: bold; }}
        .sell {{ color: red; font-weight: bold; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>PatternIQ Daily Report</h1>
        <p>Date: {today} | Signal Strength: 85%</p>
    </div>
    
    <div class="section">
        <h2>üìà Long Recommendations</h2>
        <table>
            <tr><th>Symbol</th><th>Score</th><th>Action</th><th>Size</th><th>Price</th></tr>
            <tr><td>AAPL</td><td>0.875</td><td class="buy">STRONG BUY</td><td>3.0%</td><td>$175.50</td></tr>
            <tr><td>MSFT</td><td>0.724</td><td class="buy">BUY</td><td>2.5%</td><td>$415.25</td></tr>
        </table>
    </div>
    
    <div class="section">
        <h2>üìâ Short Recommendations</h2>
        <table>
            <tr><th>Symbol</th><th>Score</th><th>Action</th><th>Size</th><th>Price</th></tr>
            <tr><td>XOM</td><td>-0.653</td><td class="sell">SELL</td><td>2.0%</td><td>$115.30</td></tr>
        </table>
    </div>
    
    <p><em>Test report generated by PatternIQ v1.0 MVP</em></p>
</body>
</html>
"""

    html_file = f"test_report_{today.strftime('%Y%m%d')}.html"
    html_path = os.path.join(reports_dir, html_file)

    with open(html_path, 'w') as f:
        f.write(html_content)

    print(f"‚úÖ HTML saved: {html_file}")

    # Try PDF generation
    pdf_file = f"test_report_{today.strftime('%Y%m%d')}.pdf"
    pdf_path = os.path.join(reports_dir, pdf_file)

    try:
        from weasyprint import HTML
        HTML(string=html_content).write_pdf(pdf_path)
        print(f"‚úÖ PDF saved: {pdf_file}")
    except Exception as e:
        print(f"‚ùå PDF generation failed: {e}")

    # List created files
    print(f"\nüìÇ Created files:")
    for file in os.listdir(reports_dir):
        file_path = os.path.join(reports_dir, file)
        if os.path.isfile(file_path):
            size = os.path.getsize(file_path)
            abs_path = os.path.abspath(file_path)
            print(f"   üìÑ {file} ({size:,} bytes)")
            print(f"      üìç {abs_path}")

    return len(os.listdir(reports_dir)) > 0

if __name__ == "__main__":
    success = create_test_reports()
    if success:
        print(f"\nüéâ Test reports created successfully!")
        print(f"üìÅ Location: /Users/tamirreznik/code/private/PatternIQ/reports/")
    else:
        print(f"\n‚ùå Test failed")
